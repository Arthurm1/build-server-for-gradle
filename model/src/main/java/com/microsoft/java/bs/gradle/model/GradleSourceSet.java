// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

package com.microsoft.java.bs.gradle.model;

import java.io.File;
import java.io.Serializable;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Represents a source set in a Gradle project.
 */
public interface GradleSourceSet extends Serializable {

  /**
   * The Gradle version of the project.
   */
  String getGradleVersion();

  /**
   * Equivalent to {@code org.gradle.api.Project.getName()}. 
   */
  String getProjectName();

  /**
   * Equivalent to {@code org.gradle.api.Project.getPath()}.
   */
  String getProjectPath();

  /**
   * Equivalent to {@code org.gradle.api.Project.getProjectDir()}.
   */
  File getProjectDir();

  /**
   * Equivalent to {@code org.gradle.api.Project.getRootDir()}.
   */
  File getRootDir();

  /**
   * Equivalent to {@code org.gradle.api.tasks.SourceSet.getName()}.
   */
  String getSourceSetName();

  /**
   * The name of the classes task.
   */
  String getClassesTaskName();

  /**
   * The name of the clean task.
   */
  String getCleanTaskName();

  /**
   * All the tasks relevant to compiling this source set.
   */
  Set<String> getTaskNames();

  /**
   * The source directories of this source set.
   */
  Set<File> getSourceDirs();

  /**
   * The generated source directories, including the ones generated by annotation processors,
   * and the ones that is inferred as generated source directories.
   */
  Set<File> getGeneratedSourceDirs();

  /**
   * The resource directories of this source set.
   */
  Set<File> getResourceDirs();

  /**
   * The output directories of this source set.
   */
  Set<File> getSourceOutputDirs();

  /**
   * The resource output directories of this source set.
   */
  Set<File> getResourceOutputDirs();

  /**
   * Any archive files created from the output of this source set to the output dirs.
   */
  Map<File, List<File>> getArchiveOutputFiles();

  /**
   * The compile classpath for this source set.
   */
  List<File> getCompileClasspath();

  /**
   * The runtime classpath for this source set.
   */
  List<File> getRuntimeClasspath();

  /**
   * Module dependencies.
   */
  Set<GradleModuleDependency> getModuleDependencies();

  /**
   * Project dependencies.
   */
  Set<BuildTargetDependency> getBuildTargetDependencies();

  /**
   * has tests defined.
   */
  boolean hasTests();

  /**
   * list of test tasks that are associated with this source set.
   */
  public Set<GradleTestTask> getTestTasks();

  /**
   * list of run tasks that are associated with this source set.
   */
  public Set<GradleRunTask> getRunTasks();

  /**
   * Extensions of the source set.
   */
  Map<String, LanguageExtension> getExtensions();
}
